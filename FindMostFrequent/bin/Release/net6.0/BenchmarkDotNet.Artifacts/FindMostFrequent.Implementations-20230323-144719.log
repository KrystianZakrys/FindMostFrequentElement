// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 3 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet  restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a
// command took 1.31s and exited with 0
// start dotnet  build -c Release --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a
// command took 11.15s and exited with 1
// start dotnet  build -c Release --no-restore --no-dependencies /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a
// command took 2.42s and exited with 0
// ***** Done, took 00:00:15 (15.17 sec)   *****
// Found 3 benchmarks:
//   Implementations.GetMostFrequentWithLinq: DefaultJob
//   Implementations.GetMostFrequentWithDictionary: DefaultJob
//   Implementations.GetMostFrequentWithLinqMixedWithDictionary: DefaultJob

Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// **************************
// Benchmark: Implementations.GetMostFrequentWithLinq: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet afaf8435-9324-48e0-a5b7-8dac9a5a214a.dll --anonymousPipes 1836 1840 --benchmarkName FindMostFrequent.Implementations.GetMostFrequentWithLinq --job Default --benchmarkId 0 in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a\bin\Release\net6.0
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2
// GC=Concurrent Workstation
// HardwareIntrinsics=AVX2,AES,BMI1,BMI2,FMA,LZCNT,PCLMUL,POPCNT VectorSize=256
// Job: DefaultJob

OverheadJitting  1: 1 op, 318200.00 ns, 318.2000 us/op
WorkloadJitting  1: 1 op, 4454823100.00 ns, 4.4548 s/op

OverheadJitting  2: 1 op, 500.00 ns, 500.0000 ns/op
WorkloadJitting  2: 1 op, 4544566700.00 ns, 4.5446 s/op

WorkloadWarmup   1: 1 op, 4316058600.00 ns, 4.3161 s/op
WorkloadWarmup   2: 1 op, 4277879500.00 ns, 4.2779 s/op
WorkloadWarmup   3: 1 op, 4281589700.00 ns, 4.2816 s/op
WorkloadWarmup   4: 1 op, 4388836100.00 ns, 4.3888 s/op
WorkloadWarmup   5: 1 op, 4431749800.00 ns, 4.4317 s/op
WorkloadWarmup   6: 1 op, 4311651300.00 ns, 4.3117 s/op
WorkloadWarmup   7: 1 op, 4368849100.00 ns, 4.3688 s/op
WorkloadWarmup   8: 1 op, 4317239800.00 ns, 4.3172 s/op

// BeforeActualRun
WorkloadActual   1: 1 op, 4261321600.00 ns, 4.2613 s/op
WorkloadActual   2: 1 op, 4365362900.00 ns, 4.3654 s/op
WorkloadActual   3: 1 op, 4219041100.00 ns, 4.2190 s/op
WorkloadActual   4: 1 op, 4336878300.00 ns, 4.3369 s/op
WorkloadActual   5: 1 op, 4248634700.00 ns, 4.2486 s/op
WorkloadActual   6: 1 op, 4348908900.00 ns, 4.3489 s/op
WorkloadActual   7: 1 op, 4280084800.00 ns, 4.2801 s/op
WorkloadActual   8: 1 op, 4296918600.00 ns, 4.2969 s/op
WorkloadActual   9: 1 op, 4258595700.00 ns, 4.2586 s/op
WorkloadActual  10: 1 op, 4275380900.00 ns, 4.2754 s/op
WorkloadActual  11: 1 op, 4269952400.00 ns, 4.2700 s/op
WorkloadActual  12: 1 op, 4218924300.00 ns, 4.2189 s/op
WorkloadActual  13: 1 op, 4175039000.00 ns, 4.1750 s/op
WorkloadActual  14: 1 op, 4298884100.00 ns, 4.2989 s/op
WorkloadActual  15: 1 op, 4110282200.00 ns, 4.1103 s/op

// AfterActualRun
WorkloadResult   1: 1 op, 4261321600.00 ns, 4.2613 s/op
WorkloadResult   2: 1 op, 4365362900.00 ns, 4.3654 s/op
WorkloadResult   3: 1 op, 4219041100.00 ns, 4.2190 s/op
WorkloadResult   4: 1 op, 4336878300.00 ns, 4.3369 s/op
WorkloadResult   5: 1 op, 4248634700.00 ns, 4.2486 s/op
WorkloadResult   6: 1 op, 4348908900.00 ns, 4.3489 s/op
WorkloadResult   7: 1 op, 4280084800.00 ns, 4.2801 s/op
WorkloadResult   8: 1 op, 4296918600.00 ns, 4.2969 s/op
WorkloadResult   9: 1 op, 4258595700.00 ns, 4.2586 s/op
WorkloadResult  10: 1 op, 4275380900.00 ns, 4.2754 s/op
WorkloadResult  11: 1 op, 4269952400.00 ns, 4.2700 s/op
WorkloadResult  12: 1 op, 4218924300.00 ns, 4.2189 s/op
WorkloadResult  13: 1 op, 4175039000.00 ns, 4.1750 s/op
WorkloadResult  14: 1 op, 4298884100.00 ns, 4.2989 s/op
WorkloadResult  15: 1 op, 4110282200.00 ns, 4.1103 s/op
// GC:  74 27 4 653812920 1
// Threading:  0 0 1
// Exceptions:  1

// AfterAll
// Benchmark Process 6192 has exited with code 0.

Mean = 4.264 s, StdErr = 0.017 s (0.40%), N = 15, StdDev = 0.066 s
Min = 4.110 s, Q1 = 4.234 s, Median = 4.270 s, Q3 = 4.298 s, Max = 4.365 s
IQR = 0.064 s, LowerFence = 4.138 s, UpperFence = 4.394 s
ConfidenceInterval = [4.193 s; 4.335 s] (CI 99.9%), Margin = 0.071 s (1.66% of Mean)
Skewness = -0.56, Kurtosis = 2.84, MValue = 2

// ** Remained 2 (66.7%) benchmark(s) to run. Estimated finish 2023-03-23 14:53 (0h 3m from now) **
Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// **************************
// Benchmark: Implementations.GetMostFrequentWithDictionary: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet afaf8435-9324-48e0-a5b7-8dac9a5a214a.dll --anonymousPipes 1788 1752 --benchmarkName FindMostFrequent.Implementations.GetMostFrequentWithDictionary --job Default --benchmarkId 1 in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a\bin\Release\net6.0
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2
// GC=Concurrent Workstation
// HardwareIntrinsics=AVX2,AES,BMI1,BMI2,FMA,LZCNT,PCLMUL,POPCNT VectorSize=256
// Job: DefaultJob

OverheadJitting  1: 1 op, 205300.00 ns, 205.3000 us/op
WorkloadJitting  1: 1 op, 736293500.00 ns, 736.2935 ms/op

OverheadJitting  2: 1 op, 300.00 ns, 300.0000 ns/op
WorkloadJitting  2: 1 op, 737858100.00 ns, 737.8581 ms/op

WorkloadWarmup   1: 1 op, 770504000.00 ns, 770.5040 ms/op
WorkloadWarmup   2: 1 op, 772113400.00 ns, 772.1134 ms/op
WorkloadWarmup   3: 1 op, 760260200.00 ns, 760.2602 ms/op
WorkloadWarmup   4: 1 op, 747859600.00 ns, 747.8596 ms/op
WorkloadWarmup   5: 1 op, 710654100.00 ns, 710.6541 ms/op
WorkloadWarmup   6: 1 op, 751304000.00 ns, 751.3040 ms/op
WorkloadWarmup   7: 1 op, 740646600.00 ns, 740.6466 ms/op

// BeforeActualRun
WorkloadActual   1: 1 op, 733383800.00 ns, 733.3838 ms/op
WorkloadActual   2: 1 op, 694366000.00 ns, 694.3660 ms/op
WorkloadActual   3: 1 op, 717788100.00 ns, 717.7881 ms/op
WorkloadActual   4: 1 op, 756629600.00 ns, 756.6296 ms/op
WorkloadActual   5: 1 op, 714494900.00 ns, 714.4949 ms/op
WorkloadActual   6: 1 op, 770045300.00 ns, 770.0453 ms/op
WorkloadActual   7: 1 op, 717466200.00 ns, 717.4662 ms/op
WorkloadActual   8: 1 op, 737588000.00 ns, 737.5880 ms/op
WorkloadActual   9: 1 op, 722566200.00 ns, 722.5662 ms/op
WorkloadActual  10: 1 op, 744301800.00 ns, 744.3018 ms/op
WorkloadActual  11: 1 op, 754418100.00 ns, 754.4181 ms/op
WorkloadActual  12: 1 op, 747395200.00 ns, 747.3952 ms/op
WorkloadActual  13: 1 op, 740415400.00 ns, 740.4154 ms/op
WorkloadActual  14: 1 op, 754471400.00 ns, 754.4714 ms/op
WorkloadActual  15: 1 op, 757065400.00 ns, 757.0654 ms/op
WorkloadActual  16: 1 op, 753761300.00 ns, 753.7613 ms/op
WorkloadActual  17: 1 op, 708001300.00 ns, 708.0013 ms/op
WorkloadActual  18: 1 op, 707741200.00 ns, 707.7412 ms/op
WorkloadActual  19: 1 op, 725248100.00 ns, 725.2481 ms/op
WorkloadActual  20: 1 op, 727977300.00 ns, 727.9773 ms/op
WorkloadActual  21: 1 op, 780099600.00 ns, 780.0996 ms/op
WorkloadActual  22: 1 op, 742726500.00 ns, 742.7265 ms/op
WorkloadActual  23: 1 op, 723865000.00 ns, 723.8650 ms/op
WorkloadActual  24: 1 op, 721349000.00 ns, 721.3490 ms/op
WorkloadActual  25: 1 op, 737548300.00 ns, 737.5483 ms/op
WorkloadActual  26: 1 op, 772622400.00 ns, 772.6224 ms/op
WorkloadActual  27: 1 op, 758655100.00 ns, 758.6551 ms/op
WorkloadActual  28: 1 op, 734051100.00 ns, 734.0511 ms/op
WorkloadActual  29: 1 op, 773892100.00 ns, 773.8921 ms/op
WorkloadActual  30: 1 op, 776039600.00 ns, 776.0396 ms/op
WorkloadActual  31: 1 op, 732561600.00 ns, 732.5616 ms/op

// AfterActualRun
WorkloadResult   1: 1 op, 733383800.00 ns, 733.3838 ms/op
WorkloadResult   2: 1 op, 694366000.00 ns, 694.3660 ms/op
WorkloadResult   3: 1 op, 717788100.00 ns, 717.7881 ms/op
WorkloadResult   4: 1 op, 756629600.00 ns, 756.6296 ms/op
WorkloadResult   5: 1 op, 714494900.00 ns, 714.4949 ms/op
WorkloadResult   6: 1 op, 770045300.00 ns, 770.0453 ms/op
WorkloadResult   7: 1 op, 717466200.00 ns, 717.4662 ms/op
WorkloadResult   8: 1 op, 737588000.00 ns, 737.5880 ms/op
WorkloadResult   9: 1 op, 722566200.00 ns, 722.5662 ms/op
WorkloadResult  10: 1 op, 744301800.00 ns, 744.3018 ms/op
WorkloadResult  11: 1 op, 754418100.00 ns, 754.4181 ms/op
WorkloadResult  12: 1 op, 747395200.00 ns, 747.3952 ms/op
WorkloadResult  13: 1 op, 740415400.00 ns, 740.4154 ms/op
WorkloadResult  14: 1 op, 754471400.00 ns, 754.4714 ms/op
WorkloadResult  15: 1 op, 757065400.00 ns, 757.0654 ms/op
WorkloadResult  16: 1 op, 753761300.00 ns, 753.7613 ms/op
WorkloadResult  17: 1 op, 708001300.00 ns, 708.0013 ms/op
WorkloadResult  18: 1 op, 707741200.00 ns, 707.7412 ms/op
WorkloadResult  19: 1 op, 725248100.00 ns, 725.2481 ms/op
WorkloadResult  20: 1 op, 727977300.00 ns, 727.9773 ms/op
WorkloadResult  21: 1 op, 780099600.00 ns, 780.0996 ms/op
WorkloadResult  22: 1 op, 742726500.00 ns, 742.7265 ms/op
WorkloadResult  23: 1 op, 723865000.00 ns, 723.8650 ms/op
WorkloadResult  24: 1 op, 721349000.00 ns, 721.3490 ms/op
WorkloadResult  25: 1 op, 737548300.00 ns, 737.5483 ms/op
WorkloadResult  26: 1 op, 772622400.00 ns, 772.6224 ms/op
WorkloadResult  27: 1 op, 758655100.00 ns, 758.6551 ms/op
WorkloadResult  28: 1 op, 734051100.00 ns, 734.0511 ms/op
WorkloadResult  29: 1 op, 773892100.00 ns, 773.8921 ms/op
WorkloadResult  30: 1 op, 776039600.00 ns, 776.0396 ms/op
WorkloadResult  31: 1 op, 732561600.00 ns, 732.5616 ms/op
// GC:  1 1 1 231744152 1
// Threading:  0 0 1

// AfterAll
// Benchmark Process 4100 has exited with code 0.

Mean = 739.953 ms, StdErr = 3.995 ms (0.54%), N = 31, StdDev = 22.245 ms
Min = 694.366 ms, Q1 = 723.216 ms, Median = 737.588 ms, Q3 = 755.551 ms, Max = 780.100 ms
IQR = 32.335 ms, LowerFence = 674.713 ms, UpperFence = 804.053 ms
ConfidenceInterval = [725.386 ms; 754.519 ms] (CI 99.9%), Margin = 14.567 ms (1.97% of Mean)
Skewness = 0.05, Kurtosis = 2.07, MValue = 2

// ** Remained 1 (33.3%) benchmark(s) to run. Estimated finish 2023-03-23 14:51 (0h 1m from now) **
Setup power plan (GUID: 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c FriendlyName: High performance)
// **************************
// Benchmark: Implementations.GetMostFrequentWithLinqMixedWithDictionary: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet afaf8435-9324-48e0-a5b7-8dac9a5a214a.dll --anonymousPipes 1812 1804 --benchmarkName FindMostFrequent.Implementations.GetMostFrequentWithLinqMixedWithDictionary --job Default --benchmarkId 2 in C:\Users\kzakrys\source\repos\FindMostFrequentElement\FindMostFrequent\bin\Release\net6.0\afaf8435-9324-48e0-a5b7-8dac9a5a214a\bin\Release\net6.0
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2
// GC=Concurrent Workstation
// HardwareIntrinsics=AVX2,AES,BMI1,BMI2,FMA,LZCNT,PCLMUL,POPCNT VectorSize=256
// Job: DefaultJob

OverheadJitting  1: 1 op, 228200.00 ns, 228.2000 us/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadJitting  1: 1 op, 3453026200.00 ns, 3.4530 s/op

OverheadJitting  2: 1 op, 400.00 ns, 400.0000 ns/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadJitting  2: 1 op, 3584751200.00 ns, 3.5848 s/op

GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   1: 1 op, 3588053100.00 ns, 3.5881 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   2: 1 op, 3549407800.00 ns, 3.5494 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   3: 1 op, 3685056800.00 ns, 3.6851 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   4: 1 op, 3550814500.00 ns, 3.5508 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   5: 1 op, 3519954400.00 ns, 3.5200 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   6: 1 op, 3513056300.00 ns, 3.5131 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   7: 1 op, 3585162600.00 ns, 3.5852 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadWarmup   8: 1 op, 3579443500.00 ns, 3.5794 s/op

// BeforeActualRun
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   1: 1 op, 3746535200.00 ns, 3.7465 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   2: 1 op, 3559053800.00 ns, 3.5591 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   3: 1 op, 3505118700.00 ns, 3.5051 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   4: 1 op, 3434049500.00 ns, 3.4340 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   5: 1 op, 3591395600.00 ns, 3.5914 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   6: 1 op, 3519128200.00 ns, 3.5191 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   7: 1 op, 3556722600.00 ns, 3.5567 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   8: 1 op, 3509600600.00 ns, 3.5096 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual   9: 1 op, 3562742900.00 ns, 3.5627 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  10: 1 op, 3506437000.00 ns, 3.5064 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  11: 1 op, 3454222200.00 ns, 3.4542 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  12: 1 op, 3447970200.00 ns, 3.4480 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  13: 1 op, 3550599700.00 ns, 3.5506 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  14: 1 op, 3522332300.00 ns, 3.5223 s/op
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadActual  15: 1 op, 3624154100.00 ns, 3.6242 s/op

// AfterActualRun
GetMostFrequentWithLinqMixedWithDictionary ############## Wynik: 
WorkloadResult   1: 1 op, 3559053800.00 ns, 3.5591 s/op
WorkloadResult   2: 1 op, 3505118700.00 ns, 3.5051 s/op
WorkloadResult   3: 1 op, 3434049500.00 ns, 3.4340 s/op
WorkloadResult   4: 1 op, 3591395600.00 ns, 3.5914 s/op
WorkloadResult   5: 1 op, 3519128200.00 ns, 3.5191 s/op
WorkloadResult   6: 1 op, 3556722600.00 ns, 3.5567 s/op
WorkloadResult   7: 1 op, 3509600600.00 ns, 3.5096 s/op
WorkloadResult   8: 1 op, 3562742900.00 ns, 3.5627 s/op
WorkloadResult   9: 1 op, 3506437000.00 ns, 3.5064 s/op
WorkloadResult  10: 1 op, 3454222200.00 ns, 3.4542 s/op
WorkloadResult  11: 1 op, 3447970200.00 ns, 3.4480 s/op
WorkloadResult  12: 1 op, 3550599700.00 ns, 3.5506 s/op
WorkloadResult  13: 1 op, 3522332300.00 ns, 3.5223 s/op
WorkloadResult  14: 1 op, 3624154100.00 ns, 3.6242 s/op
// GC:  74 27 4 573903600 1
// Threading:  0 0 1
// Exceptions:  1

// AfterAll
// Benchmark Process 6704 has exited with code 0.

Mean = 3.525 s, StdErr = 0.015 s (0.41%), N = 14, StdDev = 0.055 s
Min = 3.434 s, Q1 = 3.505 s, Median = 3.521 s, Q3 = 3.558 s, Max = 3.624 s
IQR = 0.053 s, LowerFence = 3.426 s, UpperFence = 3.638 s
ConfidenceInterval = [3.463 s; 3.586 s] (CI 99.9%), Margin = 0.062 s (1.75% of Mean)
Skewness = -0.05, Kurtosis = 2.01, MValue = 2

// ** Remained 0 (0.0%) benchmark(s) to run. Estimated finish 2023-03-23 14:51 (0h 0m from now) **
Successfully reverted power plan (GUID: 381b4222-f694-41f0-9685-ff5bb260df2e FriendlyName: Balanced)
// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\FindMostFrequent.Implementations-report.csv
  BenchmarkDotNet.Artifacts\results\FindMostFrequent.Implementations-report-github.md
  BenchmarkDotNet.Artifacts\results\FindMostFrequent.Implementations-report.html

// * Detailed results *
Implementations.GetMostFrequentWithDictionary: DefaultJob
Runtime = .NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2; GC = Concurrent Workstation
Mean = 739.953 ms, StdErr = 3.995 ms (0.54%), N = 31, StdDev = 22.245 ms
Min = 694.366 ms, Q1 = 723.216 ms, Median = 737.588 ms, Q3 = 755.551 ms, Max = 780.100 ms
IQR = 32.335 ms, LowerFence = 674.713 ms, UpperFence = 804.053 ms
ConfidenceInterval = [725.386 ms; 754.519 ms] (CI 99.9%), Margin = 14.567 ms (1.97% of Mean)
Skewness = 0.05, Kurtosis = 2.07, MValue = 2
-------------------- Histogram --------------------
[685.072 ms ; 703.471 ms) | @
[703.471 ms ; 720.174 ms) | @@@@@
[720.174 ms ; 738.763 ms) | @@@@@@@@@@
[738.763 ms ; 758.829 ms) | @@@@@@@@@@
[758.829 ms ; 784.367 ms) | @@@@@
---------------------------------------------------

Implementations.GetMostFrequentWithLinqMixedWithDictionary: DefaultJob
Runtime = .NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2; GC = Concurrent Workstation
Mean = 3.525 s, StdErr = 0.015 s (0.41%), N = 14, StdDev = 0.055 s
Min = 3.434 s, Q1 = 3.505 s, Median = 3.521 s, Q3 = 3.558 s, Max = 3.624 s
IQR = 0.053 s, LowerFence = 3.426 s, UpperFence = 3.638 s
ConfidenceInterval = [3.463 s; 3.586 s] (CI 99.9%), Margin = 0.062 s (1.75% of Mean)
Skewness = -0.05, Kurtosis = 2.01, MValue = 2
-------------------- Histogram --------------------
[3.404 s ; 3.479 s) | @@@
[3.479 s ; 3.569 s) | @@@@@@@@@
[3.569 s ; 3.644 s) | @@
---------------------------------------------------

Implementations.GetMostFrequentWithLinq: DefaultJob
Runtime = .NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2; GC = Concurrent Workstation
Mean = 4.264 s, StdErr = 0.017 s (0.40%), N = 15, StdDev = 0.066 s
Min = 4.110 s, Q1 = 4.234 s, Median = 4.270 s, Q3 = 4.298 s, Max = 4.365 s
IQR = 0.064 s, LowerFence = 4.138 s, UpperFence = 4.394 s
ConfidenceInterval = [4.193 s; 4.335 s] (CI 99.9%), Margin = 0.071 s (1.66% of Mean)
Skewness = -0.56, Kurtosis = 2.84, MValue = 2
-------------------- Histogram --------------------
[4.075 s ; 4.231 s) | @@@@
[4.231 s ; 4.401 s) | @@@@@@@@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.13.5, OS=Windows 10 (10.0.19044.2728/21H2/November2021Update)
Intel Core i7-10750H CPU 2.60GHz, 1 CPU, 12 logical and 6 physical cores
.NET SDK=6.0.203
  [Host]     : .NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2 [AttachedDebugger]
  DefaultJob : .NET 6.0.15 (6.0.1523.11507), X64 RyuJIT AVX2


|                                     Method |       Mean |    Error |   StdDev | Rank |       Gen0 |       Gen1 |      Gen2 | Allocated |
|------------------------------------------- |-----------:|---------:|---------:|-----:|-----------:|-----------:|----------:|----------:|
|              GetMostFrequentWithDictionary |   740.0 ms | 14.57 ms | 22.24 ms |    1 |  1000.0000 |  1000.0000 | 1000.0000 | 221.01 MB |
| GetMostFrequentWithLinqMixedWithDictionary | 3,524.5 ms | 61.56 ms | 54.57 ms |    2 | 74000.0000 | 27000.0000 | 4000.0000 | 547.32 MB |
|                    GetMostFrequentWithLinq | 4,264.3 ms | 70.79 ms | 66.22 ms |    3 | 74000.0000 | 27000.0000 | 4000.0000 | 623.52 MB |

// * Warnings *
Environment
  Summary -> Benchmark was executed with attached debugger

// * Hints *
Outliers
  Implementations.GetMostFrequentWithLinqMixedWithDictionary: Default -> 1 outlier  was  removed (3.75 s)
  Implementations.GetMostFrequentWithLinq: Default                    -> 1 outlier  was  detected (4.11 s)

// * Legends *
  Mean      : Arithmetic mean of all measurements
  Error     : Half of 99.9% confidence interval
  StdDev    : Standard deviation of all measurements
  Rank      : Relative position of current benchmark mean among all benchmarks (Arabic style)
  Gen0      : GC Generation 0 collects per 1000 operations
  Gen1      : GC Generation 1 collects per 1000 operations
  Gen2      : GC Generation 2 collects per 1000 operations
  Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B)
  1 ms      : 1 Millisecond (0.001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
Run time: 00:03:59 (239.99 sec), executed benchmarks: 3

Global total time: 00:04:15 (255.64 sec), executed benchmarks: 3
// * Artifacts cleanup *
